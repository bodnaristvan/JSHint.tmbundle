/*
Options files live in your home directory or project repository, and can be
written in JSON or YAML. They can be used not just by JSLintMate, but also by
teammates' lint tools in other editors, continuous integration systems,
automated testing systems, and more. This is great for helping your team use
the same coding standards everywhere.

To use this file, save a copy as `~/.jshintrc`. JSLintMate reads JSHint
options from this path by default, and detects whether it contains JSON or
YAML. If you want to change this path:

    1.  Save a copy of this file where you'd like it. For example:

          * If you want to keep a personal set of options, save it outside
            of your project's directory, e.g., `~/Documents/jshint.json`.
          * If you want to share an options file with project collaborators,
            save it in your project's directory, e.g., `config/jshint.json`.

    2.  In TextMate's "Bundles" menu, select "Bundle Editor" >
        "Show Bundle Editor" > "JavaScript JSLintMate" > "Options Files".

    3.  Change the value for `TM_JSLINTMATE_JSHINT_OPTIONS_FILE` to the path
        for your options file.

        If your options file is within your project, the value should start
        with the variable `$TM_PROJECT_DIRECTORY`, e.g.,
        `$TM_PROJECT_DIRECTORY/config/jshint.json`.

    4.  Close the "Bundle Editor" window.

Tweak the options in your new options file, and you're done!

NOTE: Not all JSON parsers tolerate comments. If you use this options file with
tools other than JSLintMate, you might need to remove these comments.

More info:
- JSHint options: http://www.jshint.com/options/
- JSLintMate:     http://rondevera.github.com/jslintmate/
*/


{

		"asi"         : false, // if automatic semicolon insertion should be tolerated
		"bitwise"     : true, // if bitwise operators should not be allowed
		"boss"        : false, // if advanced usage of assignments should be allowed
		"browser"     : true, // if the standard browser globals should be predefined
		"camelcase"   : true, // if identifiers should be required in camel case
		"couch"       : false, // if CouchDB globals should be predefined
		"curly"       : true, // if curly braces around all blocks should be required
		"debug"       : false, // if debugger statements should be allowed
		"devel"       : false, // if logging globals should be predefined (console, alert, etc.)
		"dojo"        : false, // if Dojo Toolkit globals should be predefined
		"eqeqeq"      : true, // if === should be required
		"eqnull"      : false, // if == null comparisons should be tolerated
		"es5"         : true, // if ES5 syntax should be allowed
		"esnext"      : true, // if es.next specific syntax should be allowed
		"evil"        : false, // if eval should be allowed
		"expr"        : false, // if ExpressionStatement should be allowed as Programs
		"forin"       : true, // if for in statements must filter
		"funcscope"   : true, // if only function scope should be used for scope tests
		"globalstrict": false, // if global use strict; should be allowed (also enables 'strict')
		"immed"       : true, // if immediate invocations must be wrapped in parens
		"iterator"    : false, // if the `__iterator__` property should be allowed
		"jquery"      : false, // if jQuery globals should be predefined
		"lastsemic"   : false, // if semicolons may be ommitted for the trailing
		                    // statements inside of a one-line blocks.
		"latedef"     : false, // if the use before definition should not be tolerated
		"laxbreak"    : false, // if line breaks should not be checked
		"laxcomma"    : false, // if line breaks should not be checked around commas
		"loopfunc"    : true, // if functions should be allowed to be defined within
		                    // loops
		"mootools"    : false, // if MooTools globals should be predefined
		"multistr"    : false, // allow multiline strings
		"newcap"      : true, // if constructor names must be capitalized
		"noarg"       : true, // if arguments.caller and arguments.callee should be
		                    // disallowed
		"node"        : true, // if the Node.js environment globals should be
		                    // predefined
		"noempty"     : true, // if empty blocks should be disallowed
		"nonew"       : true, // if using `new` for side-effects should be disallowed
		"nonstandard" : false, // if non-standard (but widely adopted) globals should
		                    // be predefined
		"nomen"       : true, // if names should be checked
		"onevar"      : true, // if only one var statement per function should be
		                    // allowed
		"passfail"    : false, // if the scan should stop on first error
		"plusplus"    : false, // if increment/decrement should not be allowed
		"proto"       : false, // if the `__proto__` property should be allowed
		"prototypejs" : false, // if Prototype and Scriptaculous globals should be
		                    // predefined
		"rhino"       : false, // if the Rhino environment globals should be predefined
		"undef"       : true, // if variables should be declared before used
		"unused"      : true, // if variables should be always used
		"scripturl"   : false, // if script-targeted URLs should be tolerated
		"shadow"      : false, // if variable shadowing should be tolerated
		"smarttabs"   : false, // if smarttabs should be tolerated (http//www.emacswiki.org/emacs/SmartTabs)
		"strict"      : false, // require the use strict; pragma
		"sub"         : false, // if all forms of subscript notation are tolerated
		"supernew"    : false, // if new function () and new Object;
		                    // should be tolerated
		"trailing"    : true, // if trailing whitespace rules apply
		"validthis"   : false, // if 'this' inside a non-constructor function is valid.
		                    // This is a function scoped option only.
		"withstmt"    : false, // if with statements should be allowed
		"white"       : false, // if strict whitespace rules apply
		"worker"      : false, // if Web Worker script symbols should be allowed
		"wsh"         : false, // if the Windows Scripting Host environment globals
		                    // should be predefined
		"yui"         : false, // YUI variables should be predefined

		// Obsolete options
/*    "onecase"     : true, // if one case switch statements should be allowed
    "regexp"      : true, // if the . should not be allowed in regexp literals
    "regexdash"   : true  // if unescaped first/last dash (-) inside brackets
                        // should be tolerated*/

		"maxlen"       : 140,
		"indent"       : 2,
		"maxerr"       : 50,
		"predef"       : [],
/*    "quotmark"     : true, //'single'|'double'|true*/
/*    "scope"        : false,*/
/*    "maxstatements": false, // int max statements per function*/
/*    "maxdepth"     : false, // int max nested block depth per function*/
		"maxparams"    : 10, // int max params per function
		"maxcomplexity": 10  // int max cyclomatic complexity per function
  
  
}
